一、使用EF的savechanges()完後，會更新到實體中（請看以下範例）

User u = new User{
	account = data.account;
	passwd = data.passwd;
	name = data.name;
}

db.User.Add(u);
db.User.savechanges();

int id = u.id;

//User是我們資料庫的model，裡面其實還有id的屬性（但是應該是自動增加的，所以不用給）
//而我們savechanges()完後，我們再輸入int id = u.id; 是可以取得到剛才自動產生的id
//所以用完savechanges()後，我們的變數u會是其資料庫的資料喔！

-------------------------------------------------------------------------------------------------------------
二、AJAX之用法：

	(a)正常寫法：
	
		//全部被勾選的id列表（取得checkbox被選取的陣列)
		var data = $("input[name='checkDownload']:checked").map(function () { return this.id.replace("check_", ""); }).get();

		if (data != []) {
			//傳到controller中
			$.ajax({
				url: "網址",
				data: {
					downloadContext: data
				},
				type: "GET", //也可以選POST（要大寫喔）
				traditional: true   //加入這行是只要是傳陣列給Controller的都要加
			});  
		} else {
			alert("請勾選你要的項目");
		}

	(b)精簡寫法：
	
	$.get("網址",
				{
					ladderSerial: ladder
				}).done(function (result) {
					alert(result);
				});


	(c)post的寫法：
		
	$.ajax({
			
		type: "POST",
			
		url: "@Url.Action("CheckTransactionType")",
			
		data: {
				
			ID: id,
				
			Type: type
			
		},
	
		
		success: function (result) {
				
			alert(result);
			
		}
		
	})


	(d)Post的寫法（傳Model + 有Vaild要傳回去的 + 執行完（success都跑完了）才會繼續執行下一行程式：

	//得到[ValidateAntiForgeryToken]要的值
        var token = $('input[name="__RequestVerificationToken"]').val();

        //有了座標資料後，就可以把全部東西都Ajax到Create了（因為要傳的是Model所以用{{}}）
      $.ajax({
       type: "POST",
       url: "@Url.Action("Create")",
       async: false, 先讓ajax跑完（含success，才會繼續都行下面的程式

       data: {
        __RequestVerificationToken: token,    //要傳回Vaild的值

        formData: {              //用{}包起來的就是Model裡的屬性名稱
         name: "hello",
	 englishName : "jack"
        },

        success: function (response) {
         alert('success');
        },
        error: function (response) {
         alert('error');
        }
       }
      });


	(e)Ajax事件介紹（除 success error外）：

		complete： 請求完成時執行的函式(不論結果是success或error)。
		beforeSend：發送請求之前會執行的函式。

		//上2個主要作用於 Process Bar的應用（看第10點）

------------------------------------------------------------------------------------------------------------
三、RedirectToAction之應用：

	(a)基本型（如在同一個Controller，可免除寫）：
		
		return RedirectToAction("Action名", "Controller名");


	(b)傳一般參數型（int, string, datetime, double ……等）：

		return RedirectToAction("Action名", "Controller名", new {參數名 = 參數值(或者變數)});

	(c)傳Model（只要用逗號分開即可）：

		return RedirectToAction("Action名", "Controller名", Model變數);

	(d)傳Model + 一般參數型：

		？？？？？（改成傳2個Model，或合併到1個Model吧）


PS:也可以用 Redirect("網址")  就可以接到囉！

------------------------------------------------------------------------------------------------------------
四、繫結相關應用：

	(a)List：

		在View中的呈現					Model中的呈現
		---------------					------------------

		<input name="studentID[0]" />			List<string> studentID {get;set;}
		<input name="studentID[1]" />
		<input name="studentID[2]" />

	(b)IEnumerable：（目前自訂的Class型別不太能用，要多研究 => 不過int string這些可以）

		在View中的呈現					Model中的呈現
		---------------					-------------------

		<input name="studentID" />			IEnumerable<string> studentID {get;set;}
		<input name="studentID" />
		<input name="studentID" />

------------------------------------------------------------------------------------------------------------
五、前端呼叫Controller並回傳html字串給前端 +  取到 js 或 css 的路徑

@{Html.RenderAction("Action名", "Controller名", new {參數 = 變數值  });}

ps:這個Controller回傳出來要是字串型態（可以用基本字串，或者一段html標籤 => 會在呼叫的地方變成它）

例如：  Action名=getName()   ，回傳的是 "<p>Lee</p>" 例如： public string getName(){ return "<p>Lee</p>";}

<p>hello</p>                         => 執行後    =>   	<p>hello</p>
@{Html.RenderAction("getName")}				<p>Lee</p>


用 @Url.Content("~/Script/a.js") => 就可以取到真實的路徑囉！

// 還有 @Html.RenderPartial 這些請去看 easy_test2 那裡有 Partial View的介紹時有說到

-----------------------------------------------------------------------------------------------------------
六、TempData

用法類似於Session的功用，主要用於跨別的Controller傳資料之用法。

用法：

在一個Controller中輸入  TempData["隨便的名稱"] = 隨便的值（任何類型皆可）;

在第二個Controller中得資料 =>  類別 A = TempData["隨便的名稱"] as XXX;   （因為他會跟Session一樣變成物件，所以要轉型）

--------------------------------------------------------------------------------------------------------------
七、Transaction處理（使用TransactionScope的話，在scope.Complete();沒執行完前有發生例外的話，上面的全部會取消交易）


//使用TransactionScope
   using (TransactionScope scope = new TransactionScope())
   {
    try
    {

	sql語法或者其他交易相關

     //完成
     scope.Complete();

    }
    catch
    {
     return string.Empty;
    }

***如果出現： 已停用分散式交易管理員 (MSDTC) 的網路存取。請使用元件服務系統管理工具啟用 DTC，以使用 MSDTC 安全性設定中的網路存取。

有以上問題，請改成 using (TransactionScope scope =new TransactionScope(TransactionScopeOption.Suppress))

參考網圵：https://dotblogs.com.tw/wasichris/2017/05/31/150157

-------------------------------------------------------------------------------------------------------------
八、一些小邏輯解說：

(a)陣列中放i++

	int[] a = {1, 2, 3, 4, 5}
	i = 2;
	a[i++] = a[i] + 10;

	=>出來的結果 1, 2, 14, 4, 5

	結論：在a[i++]中仍然是只抓到i的值 ，故是a[2]，但因為前面有i++了！所以現在i是3

	=> a[2] = a[3] + 10

(b)陣列中放i--

	int[] a = {1, 2, 3, 4, 5}
	i = 2;
	a[i--] = a[i] + 10;

	=>出來的結果 1, 2, 12, 4, 5

	結論：在a[i--]中仍然是只抓到i的值 ，故是a[2]，但因為前面有i--了！所以現在i是1

	=> a[2] = a[1] + 10

(c)Byte的溢位處理

	byte x = 0, y = 64;

	for(var i = 0; i < 5; i++){
		x += y;
		Console.writeLine(x);
	}

	=>出來結果： 64 128 192 0 64
	=>總結：byte最大值是256，故在第i=3時，值到了256後就會變成0了！之後在第i=4時就用0 再加上 64

------------------------------------------------------------------------------------------------------------
九、IPageList用法簡介筆記：

(1)先去NuGet裝

(2)確認View/Web.config是否有

	<add namespace="PagedList" />
	<add namespace="PagedList.Mvc" />

	這2行，有時候出現Assembly....的錯誤就是這裡沒有

(3)在Controller

	using PagedList;   //先使用using


	//Controller裡面
	[HttpGet]
	public ActionResult Index(int page = 1){
			

		int currentPage = page < 1 ? 1 : page;   //當前的頁數（如果page < 1的話就是1；反之就是page）
		IEnumerable<物件(Class)> data= 取得資料集合;
		IOrderedEnumerable<物件(Class)> pageAllList = data.OrderBy(x => x.ID);   //排序
		IPagedList result = pageAllList.ToPagedList(currentPage, pageSize);


		return View(result);

	}

(4)在View中

	@model IPagedList<Model名>

	@Html.PagedListPager(Model, page => Url.Action("Controller名(基本上是Index)", new { page, 參數名 = 變數值 }), PagedListRenderOptions.ClassicPlusFirstAndLast)

	//上面的Model指的是@model 
	//而 new {page, 參數名 = 變數值}  page是必要傳的，而後面的參數依Controller而變。

------------------------------------------------------------------------------------------------------------
十、Process Bar  (或者使用 JqueryBlockUI.js ，詳細自行找)

(a) Ajax事件介紹：

complete： 請求完成時執行的函式(不論結果是success或error)。
beforeSend：發送請求之前會執行的函式。

(b)程式碼介紹：

<html>
    <head>
        <title></title>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <script type="text/javascript" src="jquery.js"></script>
        <script>
        var Submit=function(){
            var URLs="back.php";
            
            $.ajax({
                url: URLs,
                data: $('#sentToBack').serialize(),
                type:"POST",
                dataType:'text',
                success: function(msg){
                    alert(msg);
                },
               
		//主要用beforeSend和complete做Process Bar的開關
		//如果今天不是ajax，也一樣是用Process Bar 的 show 和 hide來操作
		beforeSend:function(){
                    $('#loadingIMG').show();
                },
                complete:function(){
                    $('#loadingIMG').hide();
                },

                error:function(xhr, ajaxOptions, thrownError){ 
                    alert(xhr.status); 
                    alert(thrownError); 
                }
            });
        }

        </script>
    </head>
    <body>
     <form id="sentToBack">
            <input type="text" name="Text"/> 
            <input type="button"  value="送出" onClick="Submit()"/>
        </form>

	<!--Process Bar的部份-->
        <div id=" loadingIMG" style="display:none"><img src="loading.gif" height='14'/>資料處理中，請稍後。</div>

    </body>
</html>

(c)Process Bar的圖片下載網址（可以進行製作圖檔）

http://www.ajaxload.info/



(d)更簡單的應用(但比較沒那麼好)

	(1)在每個Form表單中加上：

		$('form').submit(function () {
        		$('body').loading();   //主要是這段
        		return true; 
    		});

	(2)而在Ajax中加的是(同上面，一樣是這3個事件時觸發)：


		error: function (xhr, textStatus, errorThrown) {
                    $('body').loading('stop');    //主要
                }
                , beforeSend: function (xhr) {
                    $('body').loading();          //主要
                }
                , complete: function () {
                    $('body').loading('stop');    //主要
                }
   	});

------------------------------------------------------------------------------------------------------------
十一、View中的checkbox的繫結

在checkbox中如果要繫結一定要加上 value="true" 才能成功傳到後端（如果value不是true，則都傳不回去）

例： <input type="checkbox" id="c" name="c" value="true" />

------------------------------------------------------------------------------------------------------------
十二、在Controller取得前一個頁面的網址

string preURL = System.Web.HttpContext.Current.Request.Headers["Referer"].ToString();

取到 Host (沒試過取到的是什麼)：

string host = System.Web.HttpContext.Current.Request.Headers["Host"].ToString();

取到當前這隻 Controller 的全部網圵名稱 (所以可以用字串分割得到 domainName)：

string currentUrl = Request.Url.ToString();

------------------------------------------------------------------------------------------------------------
十三、將一整個List轉型成另一個List (例如： string[] => int[])：

string[] tid = {"1", "2", "3"};
int[] id = tid.Select(int.Parse).ToArray();

如果要轉成字串的話：
int[] num = [1, 2, 3];
string[] id = num.Select(n => n.ToString()).ToArray();

----------------------------------------------------------------------------------------------------------
十四、基礎型的AutoMapper寫法：

     var dbResult = new List<VIP>();
    var config = new MapperConfiguration(cfg => cfg.CreateMap<VIP, Member>())
    //var config = new MapperConfiguration(cfg => cfg.CreateMap<轉型的資料Class, 要轉成的Class>());
    config.AssertConfigurationIsValid();
    var mapper = config.CreateMapper();
    //左邊是原資料型別，右邊是帶出的資料型別
    return mapper.Map<List<VIP>, List<Member>>(dbResult);
    //return mapper.Map<轉型的資料類型, 轉出的資料類型>(dbResult);

------------------------------------------------------------------------------------------------------------
十五、C#簡單使用 StoredProcedure：

//使用SP
	//ConnectionHelpr.GetADOConnectionString() 這邊是自己改變，反正就是要得到 sql連線字串
    using (SqlConnection conn = new SqlConnection(ConnectionHelpr.GetADOConnectionString()))
    {
     SqlCommand cmd = new SqlCommand("SP的名稱", conn);
     cmd.CommandType = CommandType.StoredProcedure;

     //以下是傳入參數

     //傳入VarChar型別
     cmd.Parameters.Add("@InputText", SqlDbType.VarChar);
     cmd.Parameters["@InputText"].Value = "aaa";

     cmd.Parameters.Add("@InputNo", SqlDbType.Int);
     cmd.Parameters["@InputNo"].Value = 30;

     #region 輸出的部分（前提是你的SP有回傳值）
     // @RESULT 是你在SP中的回傳變數名稱，後面的SqlDbType.Bit是回傳型別
     SqlParameter retValParam = cmd.Parameters.Add("@RESULT", SqlDbType.Bit);
     retValParam.Direction = ParameterDirection.ReturnValue;

     conn.Open();
     SqlDataReader reader = cmd.ExecuteReader();

     //如果你想select sp相關內容請影用下面兩行
     DataTable dt1 = new DataTable();  
     dt1.Load(reader);
   }

------------------------------------------------------------------------------------------------------------
十六、在Controller中取到 客戶的IP

 string getip = string.Empty;
 try
     {
        getip = Request.UserHostAddress;
     }
 catch (Exception)
     {
     }

return getip;

-----------------------------------------------------------------------------------------------------------
十七、一個後台設定就產生前端的套件(只For個大概，可以減少很多時間)

套件：umbracocms    版本：7.14(版本一定要7的，不要8的)

實作：
	步驟1：開空專案
	步驟2：去NuGet裝上這個套件
	步驟3：接下來它會一步一步告訴你

----------------------------------------------------------------------------------------------------------
十八、在Filter中取到是否是用ajax傳過來的

filterContext 就是在 Filter 中 (不管是 Action執行前，或Action執行後 會傳入的那個參數)

filterContext.HttpContext.Request.IsAjaxRequest();

-----------------------------------------------------------------------------------------------
十九、 Open API ( Swagger 用法介紹)：

參考網圵：
1. https://marcus116.blogspot.com/2019/01/how-to-add-api-document-using-swagger-in-webapi.html
2. https://dotblogs.com.tw/yc421206/2019/01/23/tips_write_write_web_api_document_via_swagger
3. https://dotblogs.com.tw/yc421206/2018/12/20/swagger_custom_header

備註：
1. 要讓某些api 不出現在畫面上
	(a) 先在此 action 上方加入 [ApiExplorerSettings(IgnoreApi = true)]
	(b) 在 SwaggerConfig.cs 中開啟 c.IgnoreObsoleteActions(); 這行即可

-----------------------------------------------------------------------------------------------
二十、 在 MVC 中 做到 Console.WriteLine 功能：

// 參考網圵： https://blog.yowko.com/visual-studio-output-window/
System.Diagnostics.Debug.WriteLine("Test");

-----------------------------------------------------------------------------------------------
二一、 前端用 jqueryval 手動觸發驗證：

$("#yourForm").validate();
var isValid = $("#yourForm").valid();
console.log(isValid);

if (isValid){
	// Submit … 等動作
}
// 不用 else  因為接下來就會出現紅字了

----------------------------------------------------------------------------------------------
二十二、 屬性基本

// 屬性的 正常寫法(裡面的變數可以變成其他的)
	public string A{
		get {
			return this.A;
		}
		set{
			this.A = value; // value就是你給的值
		}
	}

-----------------------------------------------------------------------------------------------
二十三、 將 C# 後端物件 轉成 js 物件：

@Html.Raw(Json.Encode(C#物件));

C#的物件不用前面再加@喔

-----------------------------------------------------------------------------------------------
二十四、 依據 字串Table名稱 進行查詢：

參考網圵： http://ina-work.blogspot.com/2015/10/sql-sqlspexecutesql.html

// 原 SQL 語句 (可以直接在 sql 上跑，記得換掉 tableName即可)

declare @tableName varchar(max);
declare @mysql nvarchar(max);

set @tableName  = 'COM_Codes';
set @mysql = N'select * from ' + @tableName ;

EXECUTE sp_executesql @mysql;

// 在 C# 後端中 (我做2隻，一隻接List<T>，另一隻 List<dynamic>)

        /// <summary>
        ///  用動態 Table 名 得到 資料
        /// </summary>
        /// <returns></returns>
        private List<dynamic> GetTableDataByTableName(string tableName = "")
        {
            List<dynamic> result;

            using (var conn = new SqlConnection(connString))
            {
                DynamicParameters parameters = new DynamicParameters();

                string sql = @" declare @mysql nvarchar(max);
                                set @mysql = N'select * from ' +  @TableName;
                                EXECUTE sp_executesql @mysql;
                               ";

                parameters.Add("TableName", tableName);

                result = conn.Query(sql, parameters).ToList();  //Dapper用的
            }

            return result;
        }

        /// <summary>
        ///  用動態 Table 名 得到 資料 (用 List<T> 來接的)
        /// </summary>
        /// <returns></returns>
        private List<T> GetTableDataByTableName<T>(string tableName = "")
        {
            List<T> result = new List<T>();

            using (var conn = new SqlConnection(connString))
            {
                DynamicParameters parameters = new DynamicParameters();

                string sql = @" declare @mysql nvarchar(max);
                                set @mysql = N'select * from ' +  @TableName;
                                EXECUTE sp_executesql @mysql;
                               ";

                parameters.Add("TableName", tableName);

                result = conn.Query<T>(sql, parameters).ToList();  //Dapper用的
            }

            return result;
        }

------------------------------------------------------------------------------------------------
二十五、 MVC開啟檔案權限(目前測起來可能沒效)：

參考網圵：
https://docs.microsoft.com/zh-tw/dotnet/api/system.security.permissions.fileiopermission?view=dotnet-plat-ext-3.1

範例：
try{
FileIOPermission f2 = new FileIOPermission(FileIOPermissionAccess.Read | FileIOPermissionAccess.Write | FileIOPermissionAccess.PathDiscovery, tmpFld);
                        f2.Demand();
}
catch (Exception ex){
    throw;
}

--------------------------------------------------------------------------------------------------
二十六、 在MVC中 對 WebConfig進行 CRUD：

參考網圵：
https://dotblogs.com.tw/box5068/2011/02/21/21477

取值 (R)：
System.Web.Configuration.WebConfigurationManager.AppSettings["A"];

新增 (C)：
//Configuration與AppSettingsSection必須引用System.Configuration才可使用！
Configuration config = WebConfigurationManager.OpenWebConfiguration(null); 
AppSettingsSection app = config.AppSettings;
app.Settings.Add("B", "This is B value");
config.Save(ConfigurationSaveMode.Modified);

修改 (U)：
//Configuration與AppSettingsSection必須引用System.Configuration才可使用！
Configuration config = WebConfigurationManager.OpenWebConfiguration(null); 
AppSettingsSection app = config.AppSettings;
app.Settings["A"].Value = "This is not B";
config.Save(ConfigurationSaveMode.Modified);

刪除 (D)：
//Configuration與AppSettingsSection必須引用System.Configuration才可使用！
Configuration config = WebConfigurationManager.OpenWebConfiguration(null); 
AppSettingsSection app = config.AppSettings;
app.Settings.Remove("A");
config.Save(ConfigurationSaveMode.Modified);

---------------------------------------------------------------------------------------------
二十七、讓 Cookies 前端無法用 document.cookies取到 (但仍可用 Application取得)：

重點： 讓 cookies 的 HttpOnly 設成 true 即可

參考網圵： https://blog.miniasp.com/post/2009/11/26/Using-HttpOnly-flag-to-avoid-XSS-attack

// Create an HttpOnly cookie.
HttpCookie myHttpOnlyCookie = new HttpCookie("LastVisit", DateTime.Now.ToString());

myHttpOnlyCookie.HttpOnly = true;  // 重點是這個
myHttpOnlyCookie.Name = "MyHttpOnlyCookie";
Response.AppendCookie(myHttpOnlyCookie);

------------------------------------------------------------------------------------------------
二十八、API常用的非同步寫法：

public async Task<xxx> GetRequest(xxxx request)
{
            return await Task.Run(() => this.Main(request));
}

public xxx Main(xxxx request)
{
	return new xxx();
}

---------------------------------------------------------------------------------------------------
二十九、 List 是傳址：

(1) 因為 List 是傳址，所以：

	public void aaa(){
		List<int> a = new List<int>();
		bbb(a);  // 因為是傳址的，所以到bbb函式所 Add 的在這邊都會有 
		foreach (var item in a){   // 因為在 bbb 有 加入 1 和 3 => 所以會執行2次
			....
		}

	}

	public void bbb(List<int> source){
		bbb.Add(1);
		bbb.Add(3);
	}

(2) 
	List<int> aaa = new List<int>{ 1, 3, 5};
	var bbb = aaa;
	bbb.Add(7);     // 當你這樣做時， aaa 裡面也會 Add 7 (因為 aaa 和 bbb 現在共用同一個位址)

(3)     
       public class A {
		public string a {get;set;}
		public string b {get;set;}
	}

	List<A> aaa = new List<A>();
	A item = new A();
	item.a = "1";
	item.b = "2";
	aaa.Add(item);

	item.a = "3";
	item.b = "4";
	aaa.Add(item);

	// 執行完後， aaa 裡面會是 2個 但都是 a = "3", b = "4" 的 (因為傳)

	=> 故如果要修改，就要在 item.a = "3" 之前 用 item = new A(); 重清位址才行。

---------------------------------------------------------------------------------------------------------------------------
三十、 繼承時取到自己的名稱：

        /// <summary>
        ///  得到當前的 Class 名稱
        /// </summary>
        /// <returns></returns>
        public string GetCurrentClassName()
        {
            string name = this.ToString();
            return name.Split('.').Last();
        }

--------------------------------------------------------------------------------------------------------------------------
三十一、 SQL CURSOR 寫法 (在用 dapper 時，不知為何沒成功執行，要再確認)

DECLARE MyCursor Cursor FOR
SELECT TOP (2) [id] FROM [Test].[dbo].[Test]
Open MyCursor 

declare @id numeric(18, 0);

--開始迴圈跑Cursor Start
Fetch NEXT FROM MyCursor INTO @id
While (@@FETCH_STATUS <> -1)
BEGIN

--此區塊就可以處理商業邏輯，譬如利用tableA的ID將資料塞入tableB
delete Test6 where id = @id;

Fetch NEXT FROM MyCursor INTO @id
END

--關閉&釋放cursor
CLOSE MyCursor
DEALLOCATE MyCursor

-----------------------------------------------------------------------------------------------------------------------------
三十二、 c# 開啟 網頁 寫法

System.Diagnostics.Process.Start("explorer.exe", "http://blog.csdn.net/testcs_dn");
System.Diagnostics.Process.Start("explorer.exe", "file://C:/index.html");   // 本機 html 也行

-----------------------------------------------------------------------------------------------------------------------------
三十三、 string.IsNullOrWhiteSpace 比 string.IsNullOrEmpty

string.IsNullOrWhiteSpace： null 、  空字串 、 純空白字串
string.IsNullOrEmpty     ： null 、  空字串 

=> 總結： string.IsNullOrWhiteSpace 可以包含 IsNullOrEmpty (在需要判斷 純空白也是要濾掉時，直接用 IsNullOrWhiteSpace)

