<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model IEnumerable<#= "<" + ViewDataTypeName + ">" #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<div id="content">

 <!--麵包屑 start-->
    <div class="row">
        <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
            <h1 class="page-title txt-color-blueDark">
                <i class="fa fa-table fa-fw "></i>
                @ViewBag.Title1
                <span>
                    >
                    @ViewBag.Title2
                </span>
            </h1>
        </div>
        <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">

        </div>
    </div>
    <!--麵包屑 end-->


<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<p>
   <a href="@Url.Action("Create")" class="btn btn-success"><i class="fa fa-plus"></i>新增</a> 
</p>


<!-- widget grid -->


    <section id="widget-grid" class="">
        <div class="row">
            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">


                <div class="jarviswidget jarviswidget-color-blueDark" id="wid-id-1" data-widget-editbutton="false">
                    <!-- widget options:
                    usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                    data-widget-colorbutton="false"
                    data-widget-editbutton="false"
                    data-widget-togglebutton="false"
                    data-widget-deletebutton="false"
                    data-widget-fullscreenbutton="false"
                    data-widget-custombutton="false"
                    data-widget-collapsed="true"
                    data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                      <h2>Column Filters </h2>

                    </header>



                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <th class="widget-body no-padding">

                            <!-- table start-->

 <table id="datatable_fixed_column" class="table table-striped table-bordered" width="100%">
   <thead>
   <tr>
<#
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;



foreach (PropertyMetadata property1 in properties) {
  
   if (property1.Scaffold && !property1.IsPrimaryKey && !property1.IsForeignKey) {
#>
<#
       
        if (property1.IsAssociation && GetRelatedModelMetadata(property1) == null) {
            continue;
        }
#>
      <th class="hasinput">
      <input type="text" class="form-control" placeholder="<#= GetValueExpression(property1) #>" />
      </th>
<#
    }
}
#>
	 <th class="hasinput" ></th>
	</tr>

<tr>
<#
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // We do not want to show any association properties for which there is
        // no associated foreign key.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
#>
        <th data-hide="<#= GetValueExpression(property) #>">
            @Html.DisplayNameFor(model => model.<#= GetValueExpression(property) #>)
        </th>
<#
    }
}
#>
        <th>操作</th>
    </tr>

	  </thead>

@foreach (var item in Model) {
    <tr>
<#
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // We do not want to show any association properties for which there is
        // no associated foreign key.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
#>
        <td>
            @Html.DisplayFor(modelItem => <#= "item." + GetValueExpression(property) #>)
        </td>
<#
    }
}

string pkName = GetPrimaryKeyName();
if (pkName != null) {
#>
         <td>
          <a href="@Url.Action("Edit",new { id=item.ID })" class="btn-sm btn-warning"><i class="fa fa-pencil" aria-hidden="true"></i></a> |
          <a href="@Url.Action("Details",new { id=item.ID })" class="btn-sm btn-info"><i class="fa fa-search" aria-hidden="true"></i></a> |
          <a href="@Url.Action("Delete",new { id=item.ID })" class="btn-sm btn-danger"><i class="fa fa-trash-o" aria-hidden="true"></i></a> 
        </td>
<#
} else {
#>
        <td>
            @Html.ActionLink("編輯", "Edit", new {  /* id=item.PrimaryKey */ }, new { @class = "btn-sm btn-warning" }) |
            @Html.ActionLink("詳細", "Details", new { /* id=item.PrimaryKey */ }, new { @class = "btn-sm btn-info" }) |
            @Html.ActionLink("刪除", "Delete", new { /* id=item.PrimaryKey */ },new { @class = "btn-sm btn-danger" })
        </td>
<#
}
#>
    </tr>
}

</table>

 <!-- table end-->
                        </th>
                    </div>
                    <!-- end widget content -->

                </div>
            </article>
        </div>
    </section>
	</div>


	//@@ script end

	  @section pagespecific {
            <script type="text/javascript">

                // DO NOT REMOVE : GLOBAL FUNCTIONS!

                $(document).ready(function () {

                    /* // DOM Position key index //

                    l - Length changing (dropdown)
                    f - Filtering input (search)
                    t - The Table! (datatable)
                    i - Information (records)
                    p - Pagination (paging)
                    r - pRocessing
                    < and > - div elements
                    <"#id" and > - div with an id
                    <"class" and > - div with a class
                    <"#id.class" and > - div with an id and class

                    Also see: http://legacy.datatables.net/usage/features
                    */

                    /* BASIC ;*/
                    var responsiveHelper_dt_basic = undefined;
                    var responsiveHelper_datatable_fixed_column = undefined;
                    var responsiveHelper_datatable_col_reorder = undefined;
                    var responsiveHelper_datatable_tabletools = undefined;

                    var breakpointDefinition = {
                        tablet: 1024,
                        phone: 480
                    };

                    $('#dt_basic').dataTable({
                        "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs'l>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                        "autoWidth": true,
                        "preDrawCallback": function () {
                            // Initialize the responsive datatables helper once.
                            if (!responsiveHelper_dt_basic) {
                                responsiveHelper_dt_basic = new ResponsiveDatatablesHelper($('#dt_basic'), breakpointDefinition);
                            }
                        },
                        "rowCallback": function (nRow) {
                            responsiveHelper_dt_basic.createExpandIcon(nRow);
                        },
                        "drawCallback": function (oSettings) {
                            responsiveHelper_dt_basic.respond();
                        }
                    });

                    /* END BASIC */

                    /* COLUMN FILTER  */
                    var otable = $('#datatable_fixed_column').DataTable({
                        //"bFilter": false,
                        //"bInfo": false,
                        //"bLengthChange": false
                        //"bAutoWidth": false,
                        //"bPaginate": false,
                        //"bStateSave": true // saves sort state using localStorage
                        "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6 hidden-xs'f><'col-sm-6 col-xs-12 hidden-xs'<'toolbar'>>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",
                        "autoWidth": true,
                        "preDrawCallback": function () {
                            // Initialize the responsive datatables helper once.
                            if (!responsiveHelper_datatable_fixed_column) {
                                responsiveHelper_datatable_fixed_column = new ResponsiveDatatablesHelper($('#datatable_fixed_column'), breakpointDefinition);
                            }
                        },
                        "rowCallback": function (nRow) {
                            responsiveHelper_datatable_fixed_column.createExpandIcon(nRow);
                        },
                        "drawCallback": function (oSettings) {
                            responsiveHelper_datatable_fixed_column.respond();
                        }

                    });

                    // custom toolbar
                    // $("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

                    // Apply the filter
                    $("#datatable_fixed_column thead th input[type=text]").on('keyup change', function () {

                        otable
                            .column($(this).parent().index() + ':visible')
                            .search(this.value)
                            .draw();

                    });
                    /* END COLUMN FILTER */

                    /* COLUMN SHOW - HIDE */
                    $('#datatable_col_reorder').dataTable({
                        "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'C>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                        "autoWidth": true,
                        "preDrawCallback": function () {
                            // Initialize the responsive datatables helper once.
                            if (!responsiveHelper_datatable_col_reorder) {
                                responsiveHelper_datatable_col_reorder = new ResponsiveDatatablesHelper($('#datatable_col_reorder'), breakpointDefinition);
                            }
                        },
                        "rowCallback": function (nRow) {
                            responsiveHelper_datatable_col_reorder.createExpandIcon(nRow);
                        },
                        "drawCallback": function (oSettings) {
                            responsiveHelper_datatable_col_reorder.respond();
                        }
                    });

                    /* END COLUMN SHOW - HIDE */

                    /* TABLETOOLS */
                    $('#datatable_tabletools').dataTable({

                        // Tabletools options:
                        //   https://datatables.net/extensions/tabletools/button_options
                        "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                            "t" +
                            "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                        "oTableTools": {
                            "aButtons": [
                                "copy",
                                "csv",
                                "xls",
                                {
                                    "sExtends": "pdf",
                                    "sTitle": "SmartAdmin_PDF",
                                    "sPdfMessage": "SmartAdmin PDF Export",
                                    "sPdfSize": "letter"
                                },
                                {
                                    "sExtends": "print",
                                    "sMessage": "Generated by SmartAdmin <i>(press Esc to close)</i>"
                                }
                            ],
                            "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                        },
                        "autoWidth": true,
                        "preDrawCallback": function () {
                            // Initialize the responsive datatables helper once.
                            if (!responsiveHelper_datatable_tabletools) {
                                responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                            }
                        },
                        "rowCallback": function (nRow) {
                            responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                        },
                        "drawCallback": function (oSettings) {
                            responsiveHelper_datatable_tabletools.respond();
                        }
                    });

                    /* END TABLETOOLS */

                })

            </script>
        }
		//@@ script end



<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>


</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>