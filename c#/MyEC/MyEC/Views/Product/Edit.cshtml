@model MyEC.Product

@{
    ViewBag.Title = "Edit";
}

<h2>修改產品</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.product_id)

        <div class="form-group">
            @Html.LabelFor(model => model.pruduct_name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.pruduct_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.pruduct_name, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.EditorFor(model => model.vendor_id, new { htmlAttributes = new { @class = "form-control", @style="display:none;" } })

        <div class="form-group">
            @Html.LabelFor(model => model.type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.type, new SelectList(Enum.GetValues(typeof(p_type))), new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.pic_path, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{ string p_path = Model.pic_path;}
                <input type="file" accept="image/*" onchange="loadFile(event)" name="pic_path" id="pic_path" value=@p_path>
                @Html.ValidationMessageFor(model => model.pic_path, "", new { @class = "text-danger" })
            </div>
        </div>

        <img id="output" />

        <script>
            var loadFile = function(event) {
            var output = document.getElementById('output');
            output.src = URL.createObjectURL(event.target.files[0]);};
        </script>

        <div class="form-group">
            @Html.LabelFor(model => model.amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.amount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.amount, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.EditorFor(model => model.push_date, new { htmlAttributes = new { @class = "form-control", @style = "display:none;" } })


        <div class="form-group">
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    <a href="" onclick="window.history.back()">back to list</a>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
